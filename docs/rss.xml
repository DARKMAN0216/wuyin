<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Blog Title</title><link>https://DARKMAN0216.github.io/wuyin</link><description>Blog description</description><copyright>Blog Title</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://DARKMAN0216.github.io/wuyin</link></image><lastBuildDate>Wed, 18 Jun 2025 06:54:26 +0000</lastBuildDate><managingEditor>Blog Title</managingEditor><ttl>60</ttl><webMaster>Blog Title</webMaster><item><title>WPF MVVM框架基础类之一RelayCommand</title><link>https://DARKMAN0216.github.io/wuyin/post/WPF%20MVVM-kuang-jia-ji-chu-lei-zhi-yi-RelayCommand.html</link><description>**核心目的**
WPF中用户的界面元素（例如，按钮`button`，菜单项`MenuItem`等）通常需要触发ViewModel中某个逻辑或操作，WPF提供了一种标准的方式来实现这种交互，即通过绑定UI元素的`command`属性到ViewModel中实现`System.Windows.Input.ICommand`接口的属性。</description><guid isPermaLink="true">https://DARKMAN0216.github.io/wuyin/post/WPF%20MVVM-kuang-jia-ji-chu-lei-zhi-yi-RelayCommand.html</guid><pubDate>Wed, 18 Jun 2025 06:54:01 +0000</pubDate></item><item><title>WPF MVVM框架基础类之一BaseViewModel</title><link>https://DARKMAN0216.github.io/wuyin/post/WPF%20MVVM-kuang-jia-ji-chu-lei-zhi-yi-BaseViewModel.html</link><description>**核心目的**
当ViewModel数值发生变化时，绑定对应属性的View也要发生变化，两者之间的通知机制是通过实 `System.ComponentModel.INotifyPropertyChanged`  接口来完成的。</description><guid isPermaLink="true">https://DARKMAN0216.github.io/wuyin/post/WPF%20MVVM-kuang-jia-ji-chu-lei-zhi-yi-BaseViewModel.html</guid><pubDate>Tue, 17 Jun 2025 10:43:02 +0000</pubDate></item><item><title>WPF数字时钟代码记录</title><link>https://DARKMAN0216.github.io/wuyin/post/WPF-shu-zi-shi-zhong-dai-ma-ji-lu.html</link><description>
**ViewBox**
数字时钟逻辑类

    public class DigitalClockViewClock : BaseViewModel, IDisposable
    {
    private DispatcherTimer _timer;
    private string _currentDateTimeString;
    private string _currentDayOfWeekString;
    // 暴露给 View 绑定的属性
    public string CurrentDateTimeString
    {
        get =&gt; _currentDateTimeString;
        set =&gt; Set(ref _currentDateTimeString, value);
    }
    public string CurrentDayOfWeekString
    {
        get =&gt; _currentDayOfWeekString;
        set =&gt; Set(ref _currentDayOfWeekString, value);
    }
    public DigitalClockViewClock()
    {
        // 初始化定时器
        _timer = new DispatcherTimer();
        _timer.Interval = TimeSpan.FromSeconds(1); // 每秒更新一次
        _timer.Tick += Timer_Tick
        // 立即更新一次显示
        UpdateDateTime();
        // 启动定时器
        _timer.Start();
    }

    private void Timer_Tick(object sender, EventArgs e)
    {
        // 定时器触发时更新 ViewModel 的属性
        UpdateDateTime();
    }

    private void UpdateDateTime()
    {
        DateTime now = DateTime.Now;

        // 更新日期和时间 (格式: YYYY-MM-DD HH:mm)
        CurrentDateTimeString = now.ToString('yyyy-MM-dd HH:mm');

        // 更新星期几 (格式: 星期一, 星期二, ...)
        CurrentDayOfWeekString = now.ToString('dddd');
    }

    // 实现 IDisposable 接口，用于清理资源（停止定时器）
    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        if (disposing)
        {
            // 停止定时器并移除事件处理器
            if (_timer != null)
            {
                _timer.Stop();
                _timer.Tick -= Timer_Tick;
                _timer = null;
            }
        }
    }

    // Finalizer (如果 Dispose 没有被调用，垃圾回收器会尝试调用它)
    ~DigitalClockViewClock()
    {
        Dispose(false);
    }
    }

**MainWindowView.xaml.cs**
数字时钟展示及回收

    public partial class MainWindowView: Window
    {
    private DigitalClockViewClock _digitalClockViewClock;
    public MainWindowView()
    {
        InitializeComponent();
        _digitalClockViewClock = new DigitalClockViewClock();

        // 将 ViewModel 设置为 DataContext
        this.DataContext = _digitalClockViewClock;

        // 在窗口关闭时处理 ViewModel 的 Dispose
        this.Closed += MainWindowView_Closed;
    }

    private void MainWindowView_Closed(object sender, EventArgs e)
    {
        // 在窗口关闭时调用 ViewModel 的 Dispose 方法
        if (_digitalClockViewClock != null)
        {
            _digitalClockViewClock.Dispose();
            _digitalClockViewClock = null;
        }
    }
    }

**HGDigitalTwinWindow.xaml**
数字时钟xaml展示

    &lt;StackPanel Grid.Column='2' Margin='0,0,10,0' Orientation='Horizontal'&gt;
    &lt;TextBlock Text='{Binding CurrentDateTimeString}' Foreground='#D4F4F1' FontSize='25'/&gt;
    &lt;TextBlock Text='{Binding CurrentDayOfWeekString}' Foreground='#D4F4F1' HorizontalAlignment='Right' FontSize='25' Margin='10,0'/&gt;
    &lt;/StackPanel&gt;。</description><guid isPermaLink="true">https://DARKMAN0216.github.io/wuyin/post/WPF-shu-zi-shi-zhong-dai-ma-ji-lu.html</guid><pubDate>Sat, 14 Jun 2025 08:20:57 +0000</pubDate></item></channel></rss>